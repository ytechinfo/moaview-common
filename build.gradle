/**
* moaview-ep
*/
plugins {
    id 'war'
    id 'java'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
}

def projectName ='moaview-ep'
def projectDesc ='java common class'
def projectGroupId ='com.moaview'
def projectVersion ='0.0.11'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task initSourceFolders {
    sourceSets*.java.srcDirs*.each {
        if( !it.exists() ) {
            it.mkdirs()
        }
    }
    
    sourceSets*.resources.srcDirs*.each {
        if( !it.exists() ) {
            it.mkdirs()
        }
    }
}

def def_version = [
	junit : '5.2.0'
	,junitPlatform : '1.5.0'
	,jspApi : '2.3.3'
	,jackson : '2.13.3'
	,lombok : '1.18.10'
]

dependencies {
	annotationProcessor( [group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok])
	testAnnotationProcessor([group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok])
	implementation group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok


   //junit
	testImplementation(
		 [ group: 'org.junit.jupiter' , name: 'junit-jupiter-api' , version: def_version.junit ]
		,[ group: 'org.junit.jupiter' , name: 'junit-jupiter-engine' , version: def_version.junit ]
		,[ group: 'org.junit.jupiter' , name: 'junit-jupiter-params' , version: def_version.junit ]
		,[ group: 'org.junit.vintage' , name: 'junit-vintage-engine' , version: def_version.junit ]
		
		,[ group: 'org.junit.platform' , name: 'junit-platform-launcher' , version: def_version.junitPlatform ]
		,[ group: 'org.junit.platform' , name: 'junit-platform-runner' , version: def_version.junitPlatform ]
	)
	
	implementation( // apache.commons
		[ group: 'org.apache.commons' , name: 'commons-collections4' , version: '4.4']
		,[ group: 'org.apache.commons' , name: 'commons-lang3' , version: '3.12.0']
		,[ group: 'commons-io' , name: 'commons-io' , version: '2.11.0']
	)	
	//jackson
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:  def_version.jackson
	
	// datetime
	implementation group: 'joda-time', name: 'joda-time', version: '2.10.14' 
	
	providedCompile(
		[ group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0' ]
		,[ group: 'javax.portlet', name: 'portlet-api', version: '3.0.0']
		,[ group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: def_version.jspApi ]
	)
	
}

test {
    useJUnitPlatform()
}

task generateCode {
    doLast {
        println 'Generating some code...'
    }
}

task generateCustomConfig {
    doLast {
          println "Generating custom configuration..."
    }
}
	
eclipse { // 이클립스 project facets설정.
	//프로젝트를 가져 오거나 동기화
	synchronizationTasks generateCustomConfig
	
	// 자동 빌드
	autoBuildTasks generateCode
	
	classpath {
        defaultOutputDir = file("target-notused")
        file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', "target/")
                }
            }
        }
    }
}

// JAVA file compile charset
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


def releasesDomain=project.MOAVIEW_RELEASES_URL
def releasesId=project.MOAVIEW_RELEASES_ID
def releasesPW=project.MOAVIEW_RELEASES_PW

war {
    enabled = false
}

jar{

	enabled=true

	archiveBaseName = projectName
	archiveVersion = projectVersion
	
	from ('src/main/java'){
		include '**/*.xml'
	}
	
	doLast {
		println("jar export path : " + archivePath.parent)
	}
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing  {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                groupId = projectGroupId
                artifactId = projectName
                version = projectVersion
                from components.java
            }
            /*
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            */
            pom {
                name = projectName
                description = projectDesc
                url = 'https://github.com/ytechinfo/moaview-ep.git'
                
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = releasesId
                        name = 'ytkim'
                        email = 'ytkiminfo@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/ytechinfo/moaview-ep.git'
                    developerConnection = 'scm:git:ssh://github.com/ytechinfo/moaview-ep.git'
                    url = 'https://github.com/ytechinfo/moaview-ep'
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url ="https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            //url = "https://oss.sonatype.org/content/repositories/releases"

            credentials(PasswordCredentials) {
                username = releasesId
                password = releasesPW
            }
        }
    }
}

signing {

	useGpgCmd()
	
    publishing.publications.all { publication ->
        sign publication
    }
}


javadoc {
    options.tags = [ "fileName:a:head","desc:a:head" ,"date" ,"method", "history"] // custom tag 
    options.addStringOption("locale","ko_KR");
    options.addStringOption("encoding","UTF-8");
    options.addStringOption("charset","UTF-8");
    options.addStringOption("docencoding","UTF-8");
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

